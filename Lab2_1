GPIO_SENSOR_1       `EQU	0FFFFC000   ; GPIO SNAPWIRE LOW INPUT
GPIO_SENSOR_2       `EQU    0FFFFC004

GPIO_BUTTON_CFG     `EQU	0FFFFE000   ; GPIO BUTTON ADRESA
GPIO_BUTTON_DATA    `EQU	0FFFFE004
GPIO_BUTTON_IACK    `EQU	0FFFFE008
GPIO_BUTTON_END     `EQU	0FFFFE00C

GPIO_RAMPA_1        `EQU    0FFFFC100   ; GPIO SNAPWIRE HIGH OUTPUT
GPIO_RAMPA_2        `EQU    0FFFFC104
GPIO_RAMPA_3        `EQU    0FFFFC108
GPIO_RAMPA_4        `EQU    0FFFFC10C
/*
CT1_CONST	`EQU	0FFFF0100
CT1_CR		`EQU	0FFFF0104
CT1_IACK	`EQU	0FFFF0108
CT1_IEND	`EQU	0FFFF010C

CT2_CONST	`EQU	0FFFF0200
CT2_CR		`EQU	0FFFF0204
CT2_IACK	`EQU	0FFFF0208
CT2_IEND	`EQU	0FFFF020C
*/
`ORG	0
    MOVE   	1000, SP                        ; inicijalizacija stoga
    JP		INIT	      	                ; skok na glavni zbog prekidnog vektora

`ORG	8		                        ; vektor
	DW          PREKIDNI                        ; adresa prekidnog potprograma (tipka je stisnuta)								                                                                               p rovjeriti koji int uzrokuje prekid



INIT
    MOVE        0, R0
    STORE       R0, (SIFRA)                     ; 1 <=> ( unesena sifra == ispravna sifra ) , inace je 0
    STORE       R0, (BROJAC)                    ; koliko je tipki dosad stisnuto
    STORE       R0, (UNESENA_SIFRA)             ; sifra koju je korisnik unio
    MOVE        %B 1101, (GPIO_BUTTON_CFG)      ; ulazni nacin s maskirajucim prekidom
    MOVE        %B 10010000, SR                 ; dozvoli maskirajuce prekide (tipke ce postavljati te prekide)

MAIN
	LOAD       R2, (BROJAC)                    ; cijelo vrijeme provjerava je li stisnuta srednja tipka
	CMP        R2, 5
	JR_NE      MAIN

	; sifra je unesena, zabrani daljnje prekide i idemo provjeriti sifru jel ispravna !

	MOVE        0, SR                           ; zabrana svih daljnjih prekida

	CALL        PROVJERA_SIFRE

	LOAD        R0, (SIFRA)                     ; ako sifra nije ispravna, resetiraj sve
	CMP         R0, 0
	JR_EQ       INIT

	; unesena je ispravna sifra, idemo provjeriti jel automobil ispred !

	LOAD        R0, (GPIO_SENSOR_1)
	CMP         R0, 0                           ; senzor nije pronasao automobil, resetiraj sve
	JR_EQ       INIT

	; unesena je ispravna sifra i automobil je ispred, dizi rampu !

	CALL        RAMP_UP

	; rampa je podignuta, provjeri stanje senzora2
CEKAJ
	LOAD        R0, (GPIO_SENSOR_2)
	CMP         R0, 0                           ; rampa jos uvijek treba stojati gore
	CALL_EQ     WAIT                            ; idemo pricekati 10 sekundi
	JR          CEKAJ                           ; sad opet idemo provjeriti dal mozemo spustiti ili cemo opet morati pricekat

	; senzor2 je aktiviran, treba spustiti rampu

	CALL        RAMP_DOWN

	; rampa je spustena, ciklus je gotov

	JR          INIT                            ; ili treba zavrsiti (HALT) ?

	;;;;;; KRAJ GLAVNOG PROGRAMA ;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

WAIT
    RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PROVJERA_SIFRE
        PUSH        R0
        PUSH        R1

        LOAD        R0, (UNESENA_SIFRA)
        LOAD        R1, (ISPRAVNA_SIFRA)
        CMP         R0, R1
        JR_NEQ      IZADJI                      ; sifra je neispravna

        MOVE        1, R0
        STORE       R0, (SIFRA)                 ; oznaka da je unesena ispravna sifra

IZADJI  POP         R1
        POP         R0
        RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RAMP_UP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RAMP_DOWN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PREKIDNI                                ; koristi se kad korisnik pritisne tipku
	PUSH        R0                      ; spremanje konteksta
	MOVE        SR, R0
	PUSH        R0
	PUSH        R1

	STORE       R0, (GPIO_BUTTON_IACK)  ; dojava prihvata prekida

	LOAD        R0, (BROJAC)
	ADD         R0, 1, R0           ; uvecaj brojac za 1 (jer je jos 1 tipka stisnuta)
	STORE       R0, (BROJAC)        ; i spremi odmah nazad u memoriju
    CMP         R0, 5                   ; ako je stisnuta srednja tipka, ona je 5. po redu pa izadji van
    JR_EQ       IZADJI                  ; pritisnuta srednja tipka

    ; ako nije pritisnuta srednja tipka
    LOAD        R0, (UNESENA_SIFRA)     ; ucitaj dosad stisnute tipke
    ROTL        R0, 8, R0               ; napravi mjesta za jos jednu tipku
    LOADB       R0, (GPIO_BUTTON_DATA)  ; ucitaj koja je tipka stisnuta (gore/dolje/lijevo/desno)
    STORE       R0, (UNESENA_SIFRA)     ; spremi novounesenu sifru u memoriju

IZADJI
    STORE       R0, (GPIO_BUTTON_IEND)  ; dojava zavrsetka prekida
	POP R1
	POP R0                              ; obnova konteksta
	MOVE R0, SR
	POP R0
	RETI                                ; izlaz (sintaksa za maskirajuci)



