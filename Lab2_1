REED       		  `EQU	0FFFFC000
REED_DATA   		 `EQU	0FFFFC004

GPIO_LED          	`EQU    0FFFFD000
GPIO_LED_DATA    	 `EQU    0FFFFD004

BUTTON    		 `EQU	0FFFFE000  		 ; GPIO BUTTON ADRESA
BUTTON_DATA    		`EQU	0FFFFE004
BUTTON_IACK   		 `EQU	0FFFFE008
BUTTON_END     		`EQU	0FFFFE00C

RAMPA    	        `EQU    0FFFFC100   ; GPIO SNAPWIRE HIGH OUTPUT
RAMPA_DATA     		`EQU    0FFFFC104
RAMPA_STAT		`EQU	0FFFFC108

RTC1_LR             `EQU    0FFFF0100   ; RTC1 ADRESS (CT)
RTC1_CR             `EQU    0FFFF0104
RTC1_STAT           `EQU    0FFFF0104
RTC1_CLR            `EQU    0FFFF0108
RTC1_END            `EQU    0FFFF010C

RTC2_LR             `EQU    0FFFF0200   ; RTC2 ADRESS (CT)
RTC2_CR             `EQU    0FFFF0204
RTC2_STAT           `EQU    0FFFF0204
RTC2_CLR            `EQU    0FFFF0208
RTC2_END            `EQU    0FFFF020C

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	`ORG		0
    MOVE	    1000, SP                        ; inicijalizacija stoga
    JP	        INIT	      	                ; skok na glavni zbog prekidnog vektora

	`ORG		8		                        ; vektor
	DW          PREKIDNI                        ; adresa prekidnog potprograma (tipka je stisnuta)								                                                                


INIT
    MOVE        0, R0
    STORE       R0, (SIFRA)                     ; 1 <=> ( unesena sifra == ispravna sifra ) , inace je 0
    STORE       R0, (BROJAC)                    ; koliko je tipki dosad stisnuto
    STORE       R0, (UNESENA_SIFRA)             ; sifra koju je korisnik unio
    
    MOVE	    %B 011, R0			    ; ispitivanje bitova, bez prekida
    STORE	    R0, (REED)		    ; 
    
    MOVE        %B 010, R0		              ; postavljanje bitova, bez prekida
    STORE        R0, (GPIO_LED)           	   ; 
    
    MOVE        %B 010, R0		            ; postavljanje bitova, bez prekida
    STORE        R0, (RAMPA)          		  ; 
     
    



MAIN
	; jel stigao auto?
	LOAD        	R0, (REED_DATA)
	AND		R0, %B 00000001, R0 
	OR		R0, R0, R0
	JR_Z       	MAIN

	LOAD        R0, (MASKA)
	STORE        R0, (BUTTON)           ; ispitivanje bitova s maskirajucim prekidom
	MOVE        %B 10000, SR                    ; dozvoli maskirajuce prekide (tipke ce postavljati te prekide)
    
SIFRA_1	LOAD        R2, (BROJAC)                    ; cijelo vrijeme provjerava je li stisnuta srednja tipka
	STORE       R2, (GPIO_LED_DATA)
	CMP         R2, 5                           ; dok se to provjerava u glavnom programu, dogadjaju se maskirajuci prekidi
	JR_NE       SIFRA_1                            ; i kad se dogodi 5 maskirajucih prekida, znaci da je stisnuto 5 tipki

	; sifra je unesena, zabrani daljnje prekide i idemo provjeriti sifru jel ispravna !

	MOVE        0, SR                           ; zabrana svih daljnjih prekida
	

	
	CALL        PROVJERA_SIFRE
	
	
	LOAD        R0, (SIFRA)                     ; ako sifra nije ispravna, resetiraj sve
	CMP         R0, 0
	JR_EQ       INIT
	
	

	
	; unesena je ispravna sifra i automobil je ispred, dizi rampu !

	CALL        RAMP_UP
	


	; rampa je podignuta, provjeri stanje senzora1 i senzora2
CEKAJ
	CALL        WAIT 
	LOAD        R0, (REED_DATA)	
	AND	    R0, %B 11, R0			; ocisti i provjeri
	OR	    R0, R0, R0
	JR_NZ         CEKAJ                           ; sad opet idemo provjeriti dal mozemo spustiti ili cemo opet morati pricekat
	

	; senzor2 je aktiviran, treba spustiti rampu
SPUSTAJ
	CALL        RAMP_DOWN

	; rampa je spustena, ciklus je gotov

	JR	INIT                                       ; ili treba dalje raditi (JR INIT) ?

	;;;;;; KRAJ GLAVNOG PROGRAMA ;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

WAIT                                        	    ; potprogram za cekanje 10 sekundi
	PUSH   	R0                           
	LOAD	R0, (CT_KONST)

CEK
	SUB	R0, 1, R0
	JR_NZ	CEK
	
	POP	R0
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PROVJERA_SIFRE
    PUSH        R0
    PUSH        R1

    LOAD        R0, (UNESENA_SIFRA)
    LOAD        R1, (ISPRAVNA_SIFRA)
    CMP         R0, R1
    JR_NE      VAN                         	  ; sifra je neispravna

    MOVE        1, R0
    STORE       R0, (SIFRA)                     ; oznaka da je unesena ispravna sifra

VAN
    POP         R1
    POP         R0
    RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RAMP_UP
    PUSH        R0
    PUSH        R1
    PUSH        R2
    PUSH	R3
    MOVE        0, R0                           ; R0 oznacava koliko ciklusa je dosad obavljeno
    LOAD        R2, (CIKLUS)                    ; R2 oznacava potreban broj ciklusa da se rampa podigne
    LOAD	R1, (LABELA)
    


PETLJA2
   MOVE	%D 10000, R3
CEKAJ_1
    SUB		R3,1, R3
    JR_NZ	CEKAJ_1
    
    ROTL        R1, 1, R1
    STORE       R1, (RAMPA_DATA)
    ADD         R0, 1, R0                       ; odradjen je (jos) jedan ciklus uvecaj brojac
    CMP         R0, R2                          ; ako nije odradjen dovoljan broj ciklusa
    JR_NE       PETLJA2                         ; odradi jos jedan, inace zavrsi
    

ZAVRSI
    POP		R3
    POP         R2
    POP         R1
    POP         R0
    RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RAMP_DOWN
    PUSH        R0
    PUSH        R1
    PUSH        R2
    PUSH	R3
    
    MOVE        0, R0                           ; R0 oznacava koliko ciklusa je dosad obavljeno
    LOAD        R2, (CIKLUS)                    ; R2 oznacava potreban broj ciklusa da se rampa podigne
    LOAD	R1, (LABELA)

PETLJA3
	MOVE	%D 10000, R3
CEKAJ_2
    SUB		R3,1, R3
    JR_NZ	CEKAJ_2
    
    ROTR        R1, 1, R1
    STORE       R1, (RAMPA_DATA)
    ADD         R0, 1, R0                       ; odradjen je (jos) jedan ciklus uvecaj brojac		
    CMP         R0, R2                          ; ako nije odradjen dovoljan broj ciklusa
    JR_NE       PETLJA3                         ; odradi jos jedan, inace zavrsi

    POP		R3
    POP         R2
    POP         R1
    POP         R0
    RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PREKIDNI                                ; koristi se kad korisnik pritisne tipku
	PUSH        R0                      ; spremanje konteksta
	MOVE        SR, R0
	PUSH        R0
	PUSH        R1

	STORE       R0, (BUTTON_IACK)  ; dojava prihvata prekida
	

	LOAD        R0, (BROJAC)
	ADD         R0, 1, R0               ; uvecaj brojac za 1 (jer je jos 1 tipka stisnuta)
	STORE       R0, (BROJAC)            ; i spremi odmah nazad u memoriju
	CMP         R0, 5                   ; pritisnuta je 5. tipka, idemo provjeriti jel ona srednja tipka
	JR_EQ       PROVJERA                ;

; ako nije pritisnuta srednja tipka
		; LOAD        R0, (UNESENA_SIFRA)     ; ucitaj dosad stisnute tipke
		; ROTL        R0, 8, R0               ; napravi mjesta za jos jednu tipku
		; STORE       R0, (UNESENA_SIFRA)
		; LOADB       R1, (BUTTON_DATA) 	    ; ucitaj koja je tipka stisnuta (gore/dolje/lijevo/desno)
		; STOREB      R1, (UNESENA_SIFRA)     ; spremi novounesenu sifru u memoriju
		; JR          IZADJI

	LOAD 	R0, (UNESENA_SIFRA)
	ROTL    R0, 8, R0
	LOADB	R1, (BUTTON_DATA)
	OR	R1, R0, R1
	STORE	R1, (UNESENA_SIFRA)
	JR	IZADJI
	
PROVJERA
    LOAD         R0, (BUTTON_DATA)  		; ucitaj unesenu tipku
    AND          R0, %B 0100, R0               ; ako je srednja, izadji
    JR_NZ        IZADJI

    ;ako 5. pritisnuta tipka nije srednja tipka, obrisi dosad unesenu sifru i resetiraj brojac
    MOVE        0, R1
    STORE       R1, (BROJAC)
    STORE       R1, (UNESENA_SIFRA)

	
IZADJI	
	MOVE        9000, R1
PONOVI	SUB	    R1, 1, R1
	JR_NZ       PONOVI
	STORE       R0, (BUTTON_END)  	    ; dojava zavrsetka prekida
	POP R1
	POP R0                              ; obnova konteksta
	MOVE R0, SR
	POP R0
	RETI                                ; izlaz (sintaksa za maskirajuci)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CIKLUS           DW  1E6                ; oznacava broj potrebnih ciklusa pri dizanju/spustanju rampe
SIFRA            DW  0                  ; oznacava jel unesena ispravna sifra (0 = nije, 1 = je)
BROJAC           DW  0                  ; koliko je dosad pritisnuto tipki, ako brojac = 5 => pritisnuta je srednja tipka
UNESENA_SIFRA    DW  0                  ; zasad unesena sifra
ISPRAVNA_SIFRA   DW  %B 00010000000010000000000100000010       ; sifra za podizanje rampe : lijevo, gore, desno , dolje
SREDNJA          DW  %B 0100
MASKA            DW  %B 111111111111111100000111
LABELA		 DW	11111111
CT_KONST	 DW	5AFC54

; srednja = 0000 0100 = 04
; lijevo = 0001 0000 = 10
; desno  = 0000 0001 = 01
; gore   = 0000 1000 = 08
; dolje  = 0000 0010 = 02

